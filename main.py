"""
Interface ultra-simple de contr√¥le vocal pour le robot Thymio.
Version qui fonctionne garantie !
"""

import asyncio
import os
import sys
from pathlib import Path

# Ajout du chemin racine pour les imports
sys.path.append(str(Path(__file__).parent))

from src.communication.thymio_controller import ThymioController
from src.voice_controller import VoiceController, VoiceCommandStatus


class ThymioVoiceInterface:
    """Interface ultra-simple qui fonctionne."""
    
    def __init__(self):
        self.controller = None
        self.voice_controller = None
        self.running = False
        self.voice_mode = False
    
    def clear_screen(self):
        """Efface l'√©cran."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def show_menu(self):
        """Affiche le menu et les informations."""
        self.clear_screen()
        print("ü§ñ CONTR√îLE THYMIO VOCAL")
        print("=" * 30)
        print("MODE ACTUEL:", "üé§ VOCAL" if self.voice_mode else "‚å®Ô∏è MANUEL")
        print("=" * 30)
        
        if self.voice_mode:
            print("üé§ MODE VOCAL ACTIF")
            print("Parlez maintenant !")
            print("Commandes: avancer, reculer, gauche, droite, stop, rouge, vert, bleu, √©teindre")
            print("\nPour revenir au menu: attendez le timeout ou dites 'quitter'")
        else:
            print("‚å®Ô∏è MODE MANUEL")
            print("1= Faire avancer\n2= Reculer\n3= Tourner √† gauche\n4= Tourner √† droite\n5= Stop")
            print("6= Allumer led rouge\n7= Allumer led verte\n8= Allumer led bleue\n9= √âteindre led")
            print("=============================")
            print("v= Passer en mode Vocal\n0= Quitter")

    async def voice_session(self):
        """Une session d'√©coute vocale."""
        print("\nüé§ SESSION VOCALE D√âMARR√âE")
        print("Parlez maintenant...")
        
        while self.voice_mode:
            try:
                print(f"\nüé§ √âcoute ...")
                
                command = self.voice_controller.listen_for_command()
                
                if command.status == VoiceCommandStatus.SUCCESS:
                    print(f"‚úÖ COMMANDE RECONNUE: '{command.text}'")
                    
                    if command.command_key == "quitter":
                        print("üëã Arr√™t demand√©")
                        self.voice_mode = False
                        break
                    
                    if self.controller.is_connected():
                        print(f"ü§ñ Ex√©cution de: {command.command_key}")
                        result = await self.controller.execute_command(command.command_key)
                        if result:
                            print(f"‚úÖ '{command.command_key}' R√âUSSIE !")
                        else:
                            print(f"‚ùå √âchec de '{command.command_key}'")
                    else:
                        print("‚ùå Robot non connect√©")
                
                elif command.status == VoiceCommandStatus.UNKNOWN_COMMAND:
                    print(f"‚ùì Commande inconnue: '{command.text}'")
                    print("Essayez: avancer, reculer, gauche, droite, stop, rouge, vert, bleu, √©teindre")
                
                elif command.status == VoiceCommandStatus.TIMEOUT:
                    print("‚è±Ô∏è Timeout - pas de parole d√©tect√©e")
                
                elif command.status == VoiceCommandStatus.NO_SPEECH:
                    print("üîá Aucune parole claire d√©tect√©e")
                
                else:
                    print("‚ùå Erreur de reconnaissance")
                
                # Petite pause entre les tentatives
                await asyncio.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                await asyncio.sleep(1)

        print(f"\n Session vocale arret√©e")
        self.voice_mode = False
    
    async def run(self):
        """Fonction principale simplifi√©e."""
        print("üöÄ D√©marrage de VoxThymio...")
        
        # Connexion au Thymio
        self.controller = ThymioController()
        if not await self.controller.connect():
            print("‚ùå ERREUR: Impossible de se connecter au Thymio")
            print("V√©rifiez que Thymio Suite est lanc√© et le robot connect√©")
            input("Appuyez sur Entr√©e pour quitter...")
            return
        
        # Initialisation du contr√¥leur vocal
        self.voice_controller = VoiceController()
        if not self.voice_controller.is_microphone_available():
            print("‚ö†Ô∏è ATTENTION: Microphone non disponible")
            print("Seul le mode manuel sera possible")
        
        print("‚úÖ Syst√®me pr√™t !")
        
        # Boucle principale
        self.running = True
        
        try:
            while self.running:
                self.show_menu()
                
                if self.voice_mode:
                    # Mode vocal: faire une session d'√©coute
                    await self.voice_session()
                else:
                    # Mode manuel: attendre une commande clavier
                    try:
                        choice = input("\nüëâ Votre choix: ").strip()
                        
                        if choice == "0":
                            self.running = False
                            
                        elif choice.lower() == "v":
                            if self.voice_controller.is_microphone_available():
                                self.voice_mode = True
                                print("üé§ Mode vocal activ√© !")
                            else:
                                print("‚ùå Microphone non disponible")
                                input("Appuyez sur Entr√©e...")
                        
                        elif choice in "123456789":
                            commands = {
                                "1": "avancer", "2": "reculer", "3": "tourner_gauche", 
                                "4": "tourner_droite", "5": "arreter", "6": "led_rouge",
                                "7": "led_vert", "8": "led_bleu", "9": "led_eteindre"
                            }
                            cmd = commands[choice]
                            print(f"ü§ñ Ex√©cution: {cmd}")
                            result = await self.controller.execute_command(cmd)
                            if result:
                                print(f"‚úÖ '{cmd}' ex√©cut√©e avec succ√®s !")
                            else:
                                print(f"‚ùå √âchec de '{cmd}'")
                            input("Appuyez sur Entr√©e...")
                        
                        else:
                            print("‚ùå Choix invalide")
                            input("Appuyez sur Entr√©e...")
                            
                    except KeyboardInterrupt:
                        self.running = False
                
        except Exception as e:
            print(f"‚ùå Erreur critique: {e}")
            
        finally:
            await self.controller.disconnect()
            print("üëã VoxThymio arr√™t√©")


async def main():
    """Point d'entr√©e principal."""
    interface = ThymioVoiceInterface()
    await interface.run()


if __name__ == "__main__":
    print("üé§ VoxThymio - Contr√¥le Vocal")
    print("=======================================")

    try:
        asyncio.run(main())
    
    except KeyboardInterrupt:
        print("\nüëã Programme interrompu par l'utilisateur")
    
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        input("Appuyez sur Entr√©e pour quitter...")

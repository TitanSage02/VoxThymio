"""
VoxThymio - Script de lancement principal
D√©velopp√© par Esp√©rance AYIWAHOUN pour AI4Innov

Ce script lance l'interface graphique VoxThymio avec toutes les v√©rifications n√©cessaires.
"""

import sys
import os
import subprocess
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python."""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur requis")
        print(f"   Version actuelle: {sys.version}")
        return False
    return True

def check_requirements():
    """V√©rifie que les d√©pendances sont install√©es."""
    required_packages = [
        "tkinter",
        "asyncio",
        "threading",
        "json",
        "pathlib"
    ]
    
    optional_packages = [
        "tdmclient",
        "SpeechRecognition", 
        "transformers",
        "sentence_transformers",
        "chromadb",
        "torch",
        "numpy"
    ]
    
    missing_required = []
    missing_optional = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_required.append(package)
    
    for package in optional_packages:
        try:
            __import__(package)
        except ImportError:
            missing_optional.append(package)
    
    if missing_required:
        print("‚ùå Packages requis manquants:")
        for pkg in missing_required:
            print(f"   - {pkg}")
        return False
    
    if missing_optional:
        print("‚ö†Ô∏è Packages optionnels manquants (fonctionnalit√©s limit√©es):")
        for pkg in missing_optional:
            print(f"   - {pkg}")
        print("   Installez avec: pip install -r requirements.txt")
    
    return True

def main():
    """Point d'entr√©e principal."""
    print("ü§ñ VoxThymio v1.0 - Syst√®me de contr√¥le vocal pour Thymio")
    print("   D√©velopp√© par Esp√©rance AYIWAHOUN (AI4Innov)")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    if not check_requirements():
        print("\n‚ö†Ô∏è Certaines d√©pendances sont manquantes.")
        response = input("Continuer quand m√™me ? (y/N): ").lower()
        if response != 'y':
            print("Installation annul√©e.")
            print("Installez les d√©pendances avec: pip install -r requirements.txt")
            sys.exit(1)
    
    # Lancement de l'interface
    try:
        gui_dir = Path(__file__).parent / "gui"
        launcher_path = gui_dir / "launcher.py"
        
        if not launcher_path.exists():
            print(f"‚ùå Fichier launcher non trouv√©: {launcher_path}")
            sys.exit(1)
        
        print("\nüöÄ Lancement de l'interface graphique...")
        
        # Lancer le script GUI
        os.chdir(gui_dir)
        subprocess.run([sys.executable, "launcher.py"], check=True)
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

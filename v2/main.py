"""
VoxThymio - Interface de contr√¥le pour le robot Thymio.
Supporte deux modes de contr√¥le : clavier (manuel) et vocal (avec IA).

D√©velopp√© par Esp√©rance AYIWAHOUN pour AI4Innov
"""

import asyncio
import os
import sys
from pathlib import Path

# Ajout du chemin racine pour les imports
sys.path.append(str(Path(__file__).parent))

from src.communication.thymio_controller import ThymioController
from src.voice_controller import VoiceController, VoiceCommandStatus


class ThymioVoiceInterface:
    """Interface unifi√©e de contr√¥le pour Thymio avec support vocal et clavier."""
    
    def __init__(self):
        """Initialise l'interface de contr√¥le."""
        self.controller = None          # Contr√¥leur de communication avec Thymio
        self.voice_controller = None    # Contr√¥leur de commandes vocales
        self.running = False            # √âtat de l'application
        self.voice_mode = False         # Mode de contr√¥le actif (vocal ou clavier)
        self.available_commands = []    # Liste des commandes disponibles
        self.show_command_details = False  # Affichage d√©taill√© des commandes
    
    def clear_screen(self):
        """Efface l'√©cran du terminal."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def show_menu(self):
        """Affiche le menu principal adapt√© au mode actuel."""
        self.clear_screen()
        print("ü§ñ VoxThymio - CONTR√îLE INTELLIGENT")
        print("=" * 50)
        print("MODE ACTUEL:", "üé§ VOCAL (IA)" if self.voice_mode else "‚å®Ô∏è MANUEL (Clavier)")
        print("=" * 50)
        
        # Affiche le menu appropri√© selon le mode actif
        if self.voice_mode:
            self._show_voice_mode_menu()
        else:
            self._show_manual_mode_menu()
    
    def _show_voice_mode_menu(self):
        """Affiche le menu sp√©cifique au mode vocal."""
        print("\nüé§ MODE VOCAL ACTIF")
        print("Pipeline: Audio ‚Üí Transcription ‚Üí Classification BERT ‚Üí Commande")
        print("Parlez distinctement apr√®s le signal d'√©coute\n")
        
        # Affiche un r√©sum√© des commandes vocales par cat√©gorie
        if self.voice_controller:
            categories = self.voice_controller.get_available_commands_by_category()
            
            for category, commands in categories.items():
                if commands:
                    print(f"\n{category}:")
                    command_text = ", ".join([cmd for cmd in commands[:6]])
                    if len(commands) > 6:
                        command_text += ", ..."
                    print(f"  {command_text}")
            
        print("\nPour revenir au menu: attendez le timeout ou dites 'quitter'")
    
    def _show_manual_mode_menu(self):
        """Affiche le menu sp√©cifique au mode manuel (clavier)."""
        print("\n‚å®Ô∏è MODE MANUEL (CLAVIER)")
        
        # Options de base
        print("\nCONTR√îLES:")
        print("v = Passer en mode vocal (IA)")
        print("l = Lister toutes les commandes")
        print("0 = Quitter")
        print("-" * 50)
        
        # Si les commandes sont charg√©es, montrer un sous-ensemble
        if self.available_commands:
            if self.show_command_details:
                # Afficher toutes les commandes avec leur num√©ro
                print("COMMANDES DISPONIBLES:")
                for i, cmd in enumerate(self.available_commands):
                    print(f"{i+1:2d}. {cmd}")
            else:
                # Afficher un r√©sum√© des commandes disponibles
                print("COMMANDES PRINCIPALES:")
                categories = {
                    "Mouvement": ["avancer", "reculer", "arreter", "tourner_gauche", "tourner_droite"],
                    "LEDs": ["led_rouge", "led_vert", "led_bleu", "led_eteindre"],
                    "Sons": ["son_heureux", "son_triste", "son_silence", "volume_moyen"]
                }
                
                for category, cmds in categories.items():
                    print(f"{category}:")
                    for cmd in cmds:
                        if cmd in self.available_commands:
                            idx = self.available_commands.index(cmd) + 1
                            print(f"  {idx:2d}. {cmd}")
                
                print("\nTapez 'l' pour voir toutes les commandes")
    
    async def voice_session(self):
        """Ex√©cute une session d'√©coute vocale compl√®te.
        
        Pipeline complet:
        1. Capture audio via microphone
        2. Transcription via Google Speech Recognition
        3. Classification d'intention via mod√®le BERT
        4. Ex√©cution de la commande sur Thymio
        """
        print("\nüé§ SESSION VOCALE D√âMARR√âE")
        print("Parlez maintenant...")
        
        while self.voice_mode and self.running:
            try:
                print(f"\nüé§ √âcoute en cours...")
                
                # 1-3. Capture audio, transcription et classification (via voice_controller)
                command = self.voice_controller.listen_for_command()
                
                # 4. Traitement du r√©sultat et ex√©cution sur Thymio
                if command.status == VoiceCommandStatus.SUCCESS:
                    print(f"ü§ñ INTENTION D√âTECT√âE: '{command.command_key}'")
                    
                    if command.command_key == "quitter":
                        print("üëã Retour au menu principal")
                        self.voice_mode = False
                        await asyncio.sleep(1)
                        break
                    
                    if self.controller.is_connected():
                        print(f"üîÑ Ex√©cution de la commande: {command.command_key}")
                        result = await self.controller.execute_command(command.command_key)
                        # if result:
                        #     print(f"‚úÖ '{command.command_key}' ex√©cut√©e avec succ√®s!")
                        # else:
                        #     print(f"‚ùå √âchec de '{command.command_key}'")
                    else:
                        print("‚ùå Robot non connect√©")
                
                elif command.status == VoiceCommandStatus.UNKNOWN_COMMAND:
                    print(f"‚ùì Intention non reconnue: '{command.text}'")
                    print("üí° Essayez une commande comme: avancer, reculer, arr√™ter, tourner...")
                
                elif command.status == VoiceCommandStatus.TIMEOUT:
                    print("‚è±Ô∏è Timeout - pas de parole d√©tect√©e")
                    
                    # Option pour revenir au menu apr√®s timeout
                    choice = input("Revenir au menu principal? (o/n): ").lower()
                    if choice in ['o', 'oui']:
                        self.voice_mode = False
                        break
                
                elif command.status == VoiceCommandStatus.NO_SPEECH:
                    print("üîá Aucune parole claire d√©tect√©e")
                
                else:
                    print("‚ùå Erreur de reconnaissance vocale")
                
                # Petite pause entre les tentatives
                await asyncio.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                await asyncio.sleep(1)

        print(f"\nSession vocale termin√©e")
        self.voice_mode = False
        await asyncio.sleep(1)
    
    async def run(self):
        """Fonction principale de l'application."""
        print("üöÄ D√©marrage de VoxThymio V2...")
        
        # √âtape 1: Connexion au Thymio
        print("\n‚è≥ Connexion au robot Thymio...")
        self.controller = ThymioController()
        if not await self.controller.connect():
            print("‚ùå ERREUR: Impossible de se connecter au Thymio")
            print("‚ö†Ô∏è V√©rifiez que Thymio Suite est lanc√© et qu'un robot est connect√©")
            input("Appuyez sur Entr√©e pour quitter...")
            return
        
        # √âtape 2: Chargement des commandes disponibles
        self.available_commands = self.controller.get_available_commands()
        print(f"‚úÖ {len(self.available_commands)} commandes disponibles")
        
        # √âtape 3: Initialisation du contr√¥leur vocal
        print("\n‚è≥ Initialisation du moteur vocal et IA...")
        self.voice_controller = VoiceController(intent_model_path="./models")
        
        if not self.voice_controller.is_microphone_available():
            print("‚ö†Ô∏è ATTENTION: Microphone non disponible")
            print("‚ö†Ô∏è Seul le mode manuel (clavier) sera possible")
        else:
            print("‚úÖ Microphone et mod√®le d'IA pr√™ts")
        
        print("\n‚úÖ Syst√®me pr√™t ! D√©marrage de l'interface...")
        
        # Boucle principale
        self.running = True
        
        try:
            while self.running:
                self.show_menu()
                
                if self.voice_mode:
                    # Mode vocal: ex√©cuter une session d'√©coute
                    await self.voice_session()
                else:
                    # Mode manuel: attendre une commande clavier
                    try:
                        choice = input("\nüëâ Votre choix: ").strip().lower()
                        
                        if choice == "0":
                            self.running = False
                            
                        elif choice == "v":
                            if self.voice_controller.is_microphone_available():
                                self.voice_mode = True
                                print("üé§ Mode vocal activ√© !")
                                await asyncio.sleep(0.5)
                            else:
                                print("‚ùå Microphone non disponible")
                                input("Appuyez sur Entr√©e pour continuer...")
                        
                        elif choice == "l":
                            # Bascule l'affichage d√©taill√© des commandes
                            self.show_command_details = not self.show_command_details
                        
                        elif choice.isdigit():
                            # Ex√©cuter une commande par son num√©ro
                            cmd_idx = int(choice) - 1
                            if 0 <= cmd_idx < len(self.available_commands):
                                cmd = self.available_commands[cmd_idx]
                                print(f"ü§ñ Ex√©cution: {cmd}")
                                result = await self.controller.execute_command(cmd)
                                # if result:
                                #     print(f"‚úÖ '{cmd}' ex√©cut√©e avec succ√®s !")
                                # else:
                                #     print(f"‚ùå √âchec de '{cmd}'")
                                input("Appuyez sur Entr√©e pour continuer...")
                            else:
                                print(f"‚ùå Choix invalide: {choice}")
                                input("Appuyez sur Entr√©e pour continuer...")
                        
                        else:
                            print(f"‚ùå Choix invalide: {choice}")
                            input("Appuyez sur Entr√©e pour continuer...")
                            
                    except KeyboardInterrupt:
                        self.running = False
                
        except Exception as e:
            print(f"‚ùå Erreur critique: {e}")
            
        finally:
            # Nettoyage et d√©connexion
            print("\n‚è≥ Fermeture de l'application...")
            await self.controller.disconnect()
            print("üëã VoxThymio V2 arr√™t√©")


async def main():
    """Point d'entr√©e principal de l'application."""
    interface = ThymioVoiceInterface()
    await interface.run()


if __name__ == "__main__":
    print("üé§ VoxThymio - Contr√¥le intelligent du robot Thymio")
    print("=" * 50)
    print("D√©velopp√© par AI4Innov")
    print("=" * 50)

    try:
        asyncio.run(main())
    
    except KeyboardInterrupt:
        print("\nüëã Programme interrompu par l'utilisateur")
    
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        input("Appuyez sur Entr√©e pour quitter...")

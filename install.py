"""
Script d'installation et de configuration pour VoxThymio Intelligence
Installe les d√©pendances et configure l'environnement.

D√©velopp√© par Esp√©rance AYIWAHOUN pour AI4Innov
"""

import subprocess
import sys
import os
from pathlib import Path
import json

def run_command(command, description):
    """Ex√©cute une commande avec gestion d'erreur."""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} r√©ussi")
            return True
        else:
            print(f"‚ùå Erreur: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        return False

def install_dependencies():
    """Installe les d√©pendances Python."""
    print("üì¶ INSTALLATION DES D√âPENDANCES")
    print("=" * 50)
    
    # Mise √† jour de pip
    run_command(f"{sys.executable} -m pip install --upgrade pip", "Mise √† jour de pip")
    
    # Installation des requirements
    requirements_file = Path(__file__).parent / "requirements.txt"
    if requirements_file.exists():
        run_command(f"{sys.executable} -m pip install -r {requirements_file}", "Installation des d√©pendances")
    else:
        print("‚ùå Fichier requirements.txt non trouv√©")
        return False
    
    return True

def check_python_version():
    """V√©rifie la version de Python."""
    print("üêç V√âRIFICATION DE PYTHON")
    print("=" * 50)
    
    version = sys.version_info
    print(f"Version Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    print("‚úÖ Version Python compatible")
    return True

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires."""
    print("üìÅ CR√âATION DES R√âPERTOIRES")
    print("=" * 50)
    
    directories = [
        "vector_db",
        "logs",
        "exports"
    ]
    
    for directory in directories:
        dir_path = Path(__file__).parent / directory
        dir_path.mkdir(exist_ok=True)
        print(f"‚úÖ R√©pertoire cr√©√©: {directory}")
    
    return True

def check_dependencies():
    """V√©rifie les d√©pendances critiques."""
    print("üîç V√âRIFICATION DES D√âPENDANCES")
    print("=" * 50)
    
    critical_packages = [
        "transformers",
        "torch",
        "chromadb",
        "numpy",
        "tkinter"
    ]
    
    missing_packages = []
    
    for package in critical_packages:
        try:
            if package == "tkinter":
                import tkinter
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} manquant")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Packages manquants: {', '.join(missing_packages)}")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def test_bert_model():
    """Teste le chargement du mod√®le BERT."""
    print("üß† TEST DU MOD√àLE BERT")
    print("=" * 50)
    
    try:
        from transformers import AutoTokenizer, AutoModel
        print("üì• T√©l√©chargement du mod√®le BERT fran√ßais...")
        
        # Test avec un mod√®le l√©ger
        model_name = "camembert-base"
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModel.from_pretrained(model_name)
        
        print("‚úÖ Mod√®le BERT charg√© avec succ√®s")
        
        # Test d'encoding simple
        text = "test de fonctionnement"
        tokens = tokenizer(text, return_tensors='pt')
        print("‚úÖ Tokenisation fonctionnelle")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test BERT: {e}")
        return False

def create_config_file():
    """Cr√©e un fichier de configuration par d√©faut."""
    print("‚öôÔ∏è CR√âATION DE LA CONFIGURATION")
    print("=" * 50)
    
    config = {
        "embedding_model": "camembert-base",
        "vector_db_path": "./vector_db",
        "thresholds": {
            "execution": 0.6,
            "learning": 0.85
        },
        "ui_settings": {
            "theme": "modern_dark",
            "auto_connect": False,
            "show_similarity_scores": True
        },
        "logging": {
            "level": "INFO",
            "file": "./logs/voxthymio.log"
        }
    }
    
    config_file = Path(__file__).parent / "config.json"
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print("‚úÖ Fichier de configuration cr√©√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de config.json: {e}")
        return False

def display_summary():
    """Affiche un r√©sum√© de l'installation."""
    print("\n" + "=" * 60)
    print("üéâ INSTALLATION TERMIN√âE")
    print("=" * 60)
    print()
    print("üìã FICHIERS PRINCIPAUX:")
    print("‚Ä¢ main.py              - Interface console compl√®te")
    print("‚Ä¢ launch_gui.py        - Lanceur interface graphique")
    print("‚Ä¢ requirements.txt     - D√©pendances Python")
    print("‚Ä¢ config.json          - Configuration syst√®me")
    print()
    print("üìÅ R√âPERTOIRES:")
    print("‚Ä¢ src/                 - Code source du syst√®me")
    print("‚Ä¢ gui/                 - Interface graphique")
    print("‚Ä¢ vector_db/           - Base vectorielle ChromaDB")
    print("‚Ä¢ logs/                - Fichiers de log")
    print("‚Ä¢ exports/             - Exportations de donn√©es")
    print()
    print("üöÄ POUR D√âMARRER:")
    print("‚Ä¢ Mode console: python main.py")
    print("‚Ä¢ Mode graphique: python launch_gui.py")
    print()
    print("üìö COMMANDES PRINCIPALES:")
    print("‚Ä¢ 'avancer' - faire avancer le robot")
    print("‚Ä¢ 'tourner √† gauche' - tourner vers la gauche")
    print("‚Ä¢ 'LED rouge' - allumer la LED en rouge")
    print("‚Ä¢ 'arr√™ter' - arr√™ter le robot")
    print()
    print("üí° Le syst√®me apprend automatiquement de nouvelles commandes !")
    print("   Seuil d'ex√©cution: 0.6 | Seuil d'apprentissage: 0.85")

def main():
    """Fonction principale d'installation."""
    print("ü§ñ VoxThymio - Installation du Syst√®me Intelligent")
    print("D√©velopp√© par Esp√©rance AYIWAHOUN pour AI4Innov")
    print("=" * 60)
    print()
    
    # √âtapes d'installation
    steps = [
        ("V√©rification Python", check_python_version),
        ("Cr√©ation des r√©pertoires", create_directories),
        ("Installation des d√©pendances", install_dependencies),
        ("V√©rification des packages", check_dependencies),
        ("Test du mod√®le BERT", test_bert_model),
        ("Configuration syst√®me", create_config_file)
    ]
    
    failed_steps = []
    
    for step_name, step_function in steps:
        print(f"\nüìã √âTAPE: {step_name}")
        print("-" * 40)
        
        if not step_function():
            failed_steps.append(step_name)
            print(f"‚ùå √âchec de l'√©tape: {step_name}")
        else:
            print(f"‚úÖ √âtape r√©ussie: {step_name}")
    
    print("\n" + "=" * 60)
    
    if failed_steps:
        print("‚ö†Ô∏è INSTALLATION INCOMPL√àTE")
        print(f"√âtapes √©chou√©es: {', '.join(failed_steps)}")
        print("Veuillez corriger les erreurs et relancer l'installation.")
    else:
        print("üéâ INSTALLATION R√âUSSIE !")
        display_summary()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Installation interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
    finally:
        input("\nAppuyez sur Entr√©e pour quitter...")
